{"version":3,"file":"static/js/682.2e61b6fa.chunk.js","mappings":"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","sources":["components/Utils/PlotFigure.tsx","components/Game/Map.tsx","components/Game/WinScreen.tsx","components/Game/Game.tsx","components/Game/GamePage.tsx","../../shared/dist/helpers.js"],"sourcesContent":["/* eslint-disable -- file copied from another project */\nimport React, { FC, useEffect, useMemo, useRef } from \"react\";\nimport * as Plot from \"@observablehq/plot\";\nimport { useResizeDetector } from \"react-resize-detector\";\nimport * as d3 from \"d3\";\n\ntype Props = {\n  options: Plot.PlotOptions;\n  fit?: boolean;\n  fit_ratio?: number;\n  style?: React.CSSProperties;\n  transform?: <T extends d3.Selection<SVGSVGElement, unknown, null, undefined>>(elt: T) => void;\n};\n\nconst PlotFigure: FC<Props> = ({ options: options_, style, fit, transform, fit_ratio }) => {\n  const latestKnownDimensions = useRef<{\n    width: number;\n    height: number;\n  }>();\n  const { ref, width = latestKnownDimensions.current?.width, height = latestKnownDimensions.current?.height } = useResizeDetector();\n  const options = useMemo(\n    () => ({\n      ...options_,\n      width: fit ? options_.width ?? width : options_.width,\n      height: fit ? (fit_ratio ? (options_.width ?? width ?? 0) * fit_ratio : options_.height ?? height) : options_.height,\n    }),\n    [options_, width, height, fit],\n  );\n\n  useEffect(() => {\n    if (width && height) latestKnownDimensions.current = { width, height };\n    const plot = Plot.plot(options);\n    const element = ref.current;\n    if (element) {\n      const child = element.children[0];\n      if (child) {\n        child.remove();\n      }\n\n      if (transform) {\n        transform(d3.select(plot as SVGSVGElement));\n      }\n\n      element.appendChild(plot);\n    }\n  }, [ref, options, width, height, transform]);\n\n  return (\n    <div\n      key={JSON.stringify({\n        options_,\n      })}\n      style={style}\n      ref={ref}\n    />\n  );\n};\n\nexport default PlotFigure;\n","import { GameEngine } from \"shared/GameEngine\";\nimport React, { useMemo } from \"react\";\nimport PlotFigure from \"../Utils/PlotFigure\";\nimport * as Plot from \"@observablehq/plot\";\nimport { Colors } from \"@/constants\";\n\nfunction Map({ gameEngine, showWireframe }: { gameEngine: GameEngine; showWireframe?: boolean }) {\n  const map = useMemo(\n    () => ({\n      type: \"FeatureCollection\",\n      features: gameEngine.map.features\n        .map((f) => ({\n          type: \"Feature\",\n          geometry: f.geometry,\n          properties: {\n            name: f.properties.name,\n            style: (() => {\n              const id = `${f.id}`;\n              if (gameEngine.from === id) {\n                return { fill: Colors.FROM_COUNTRY, stroke: Colors.FROM_COUNTRY };\n              } else if (gameEngine.to === id) {\n                return { fill: Colors.TO_COUNTRY, stroke: Colors.TO_COUNTRY };\n              } else if (gameEngine.guesses.map((g) => g.id).includes(id)) {\n                const guess = gameEngine.guesses.find((g) => g.id === id);\n                return {\n                  stroke: \"#00000090\",\n                  fill: !guess?.correct && !guess?.mostly_correct ? \"#FF000020\" : guess?.correct ? \"#00000090\" : \"transparent\",\n                };\n              } else {\n                return null;\n              }\n            })(),\n          },\n        }))\n        .filter((f) => f.properties.style !== null),\n    }),\n    [gameEngine.map, gameEngine.from, gameEngine.to, gameEngine.guesses],\n  );\n  return (\n    <div>\n      <PlotFigure\n        fit\n        fit_ratio={0.5}\n        options={{\n          marks: [\n            showWireframe\n              ? Plot.geo(gameEngine.map, {\n                  stroke: \"lightgray\",\n                  fill: \"none\",\n                  strokeWidth: 0.1,\n                })\n              : null,\n            Plot.geo(map, {\n              fill: (d) => d.properties.style?.fill,\n              stroke: (d) => d.properties.style?.stroke,\n            }),\n          ],\n          axis: false,\n          projection: {\n            type: \"mercator\",\n            domain: map,\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Map;\n","import { useGameEngine } from \"@/hooks/useGameEngine\";\nimport { GameEngine } from \"shared/GameEngine\";\nimport { Breadcrumb, Button, Tag } from \"antd\";\nimport React from \"react\";\nimport { getCountryName } from \"shared/helpers\";\nimport { generatePathForGame } from \"shared/algo\";\nimport { useNewGameConfig } from \"./NewGameForm\";\n\nfunction WinScreen({ gameEngine }: { gameEngine: GameEngine }) {\n  const { setGameEngine } = useGameEngine();\n  const newGameConfig = useNewGameConfig();\n  if (!gameEngine.won) return null;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n      }}\n    >\n      <h2>Congrats ! 🥳</h2>\n      <div>\n        You found in {gameEngine.won.attempt} attemps{\" \"}\n        {!gameEngine.won.perfect ? (\n          <span>(perfect was {gameEngine.all_shortest_path[0].length - 2})</span>\n        ) : (\n          <span>(This is the perfect score !)</span>\n        )}\n      </div>\n      <div style={{ padding: \"1em\" }}>\n        {gameEngine.guesses.map((guess) => (\n          <Tag key={guess.id} color={guess.correct ? \"green\" : guess.mostly_correct ? \"orange\" : \"red\"}>\n            {guess.name}\n          </Tag>\n        ))}\n      </div>\n      <div style={{ padding: \"1em\" }}>\n        <h3>Possible paths :</h3>\n        {gameEngine.all_shortest_path.map((shortest_path) => (\n          <div key={shortest_path.join(\"-\")}>{shortest_path.map((c) => getCountryName(c, gameEngine.map)).join(\" > \")}</div>\n        ))}\n      </div>\n      <div style={{ padding: \"1em\" }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            const path = generatePathForGame(\n              newGameConfig.selectedMap.map.features.map((f) => ({\n                id: `${f.id}`,\n                neighbors: f.properties.border_countries,\n              })),\n              newGameConfig.range[0],\n              newGameConfig.range[1],\n            );\n            setGameEngine(new GameEngine(gameEngine.map, path[0], path[path.length - 1]));\n          }}\n        >\n          Start a new game\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default WinScreen;\n","import React, { useMemo, useState } from \"react\";\nimport { GameEngine } from \"shared/GameEngine\";\nimport { getCountryName } from \"shared/helpers\";\nimport Map from \"./Map\";\nimport { Colors } from \"@/constants\";\nimport { AutoComplete, Button, Checkbox, Col, Input, Row, Tag } from \"antd\";\nimport WinScreen from \"./WinScreen\";\n\nfunction Game({ gameEngine, setGameEngine }: { gameEngine: GameEngine; setGameEngine: (gameEngine: GameEngine) => void }) {\n  const [showWireframe, setShowWireframe] = React.useState(false);\n  const autocompleteOptions = useMemo(\n    () =>\n      gameEngine.map.features\n        .map((f) => ({\n          value: f.properties.name,\n          label: f.properties.name,\n        }))\n        .filter((o) => !gameEngine.guesses.map((g) => g.name).includes(o.value))\n        .filter((d) => d.value !== getCountryName(gameEngine.from, gameEngine.map) && d.value !== getCountryName(gameEngine.to, gameEngine.map)),\n    [gameEngine.map, gameEngine.guesses, gameEngine.to, gameEngine.from],\n  );\n  const [input, setInput] = useState(\"\");\n  return (\n    <div>\n      <h2>\n        I want to go from{\" \"}\n        <span\n          style={{\n            fontWeight: \"bold\",\n            fontSize: \"1.2em\",\n            color: Colors.FROM_COUNTRY,\n          }}\n        >\n          {getCountryName(gameEngine.from, gameEngine.map)}\n        </span>{\" \"}\n        to{\" \"}\n        <span\n          style={{\n            fontWeight: \"bold\",\n            fontSize: \"1.2em\",\n            color: Colors.TO_COUNTRY,\n          }}\n        >\n          {getCountryName(gameEngine.to, gameEngine.map)}\n        </span>\n      </h2>\n      <Map gameEngine={gameEngine} showWireframe={showWireframe || !!gameEngine.won} />\n      {gameEngine.won ? (\n        <div style={{ marginTop: \"1em\" }}>\n          <WinScreen gameEngine={gameEngine} />\n        </div>\n      ) : (\n        <>\n          <div style={{ padding: \"1em\" }}>\n            <Checkbox checked={showWireframe} onChange={(e) => setShowWireframe(e.target.checked)}>\n              Show wireframe\n            </Checkbox>\n          </div>\n          <div style={{ padding: \"1em\" }}>\n            <AutoComplete\n              style={{ width: \"100%\" }}\n              value={input}\n              onChange={setInput}\n              options={autocompleteOptions}\n              filterOption={(inputValue, option) => option?.value.toLowerCase().indexOf(inputValue.toLowerCase()) !== -1}\n            >\n              <Input.Search\n                size=\"large\"\n                placeholder=\"Select a country, territory...\"\n                enterButton={<Button type=\"primary\">Guess</Button>}\n                disabled={autocompleteOptions.map((d) => d.value).includes(input)}\n                onSearch={(guessValue) => {\n                  const id = `${gameEngine.map.features.find((f) => f.properties.name === guessValue)?.id}`;\n                  try {\n                    gameEngine.guess(id);\n                    const clone = Object.assign({}, gameEngine);\n                    Object.setPrototypeOf(clone, GameEngine.prototype);\n                    setGameEngine(clone);\n                    setInput(\"\");\n                  } catch (err) {\n                    console.error(err);\n                  }\n                }}\n              />\n            </AutoComplete>\n          </div>\n          <div style={{ padding: \"1em\" }}>\n            {gameEngine.guesses.map((guess) => (\n              <Tag key={guess.id} color={guess.correct ? \"green\" : guess.mostly_correct ? \"orange\" : \"red\"}>\n                {guess.name}\n              </Tag>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Game;\n","import { useGameEngine } from \"@/hooks/useGameEngine\";\nimport { useNavigate } from \"react-router\";\nimport Game from \"./Game\";\nimport { GameEngine } from \"shared/GameEngine\";\nimport React from \"react\";\nimport { generatePathForGame, getAllShortestPaths } from \"shared/algo\";\nimport { basename } from \"@/App\";\n\nexport function GamePage() {\n  const { gameEngine, setGameEngine } = useGameEngine();\n  if (!gameEngine) {\n    window.location.href = basename;\n    console.error(\"No game engine found\");\n    return null;\n  }\n\n  return <Game gameEngine={gameEngine} setGameEngine={setGameEngine} />;\n}\n\nexport default GamePage;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCountryName = getCountryName;\nfunction getCountryName(id, map) {\n    var _a, _b;\n    return (_b = (_a = map.features.find((f) => f.id === id)) === null || _a === void 0 ? void 0 : _a.properties.name) !== null && _b !== void 0 ? _b : null;\n}\n"],"names":["_ref","_latestKnownDimension","_latestKnownDimension2","options","options_","style","fit","transform","fit_ratio","latestKnownDimensions","useRef","ref","width","current","height","useResizeDetector","useMemo","_options_$width","_ref2","_options_$width2","_options_$height","useEffect","plot","Plot","element","child","children","remove","d3","appendChild","_jsx","JSON","stringify","gameEngine","showWireframe","map","type","features","f","geometry","properties","name","id","concat","from","fill","Colors","FROM_COUNTRY","stroke","to","TO_COUNTRY","guesses","g","includes","guess","find","correct","mostly_correct","filter","PlotFigure","marks","strokeWidth","d","_d$properties$style","_d$properties$style2","axis","projection","domain","setGameEngine","useGameEngine","newGameConfig","useNewGameConfig","won","_jsxs","display","flexDirection","alignItems","attempt","perfect","all_shortest_path","length","padding","Tag","color","shortest_path","c","getCountryName","join","Button","onClick","path","generatePathForGame","selectedMap","neighbors","border_countries","range","GameEngine","setShowWireframe","React","autocompleteOptions","value","label","o","input","setInput","useState","fontWeight","fontSize","Map","marginTop","WinScreen","_Fragment","Checkbox","checked","onChange","e","target","AutoComplete","filterOption","inputValue","option","toLowerCase","indexOf","Input","Search","size","placeholder","enterButton","disabled","onSearch","guessValue","_gameEngine$map$featu","clone","Object","assign","setPrototypeOf","prototype","err","console","error","GamePage","Game","window","location","href","basename","exports","_a","_b"],"sourceRoot":""}